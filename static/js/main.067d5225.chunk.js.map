{"version":3,"sources":["API/api.js","redux/reducers/authReducer.js","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","components/Login/Login.jsx","components/Login/LoginContainer.jsx","redux/reducers/mainReducer.js","components/Main/Users/User.jsx","components/Main/Users/UserContainer.jsx","assets/images/loader.svg","components/Main/AddUser/AddUser.jsx","components/Main/AddUser/AddUserContainer.jsx","components/Main/Main.jsx","components/Main/MainContainer.jsx","App.jsx","AppContainer.jsx","redux/redux-store.js","index.js"],"names":["instance","authAPI","axios","get","user","password","data","FormData","append","post","page","acsOrDesc","name","mail","text","id","token","status","LOGIN","LOGOUT","AUTH_ME","initialState","error","isAuthMe","message","openForm","loginForm","passwordForm","login","formData","type","payload","authReducer","state","action","copyState","Header","props","className","onClick","logoutThunk","authMeAC","HeaderContainer","this","React","Component","connect","auth","dispatch","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","required","LoginContainer","loginThunk","username","then","response","GET_USERS","SELECT_PAGE","SORT_ID","SORT_USERNAME","SORT_EMAIL","SORT_STATUS","ADD_USER","NEW_TEXT_USER","EDIT_INPUT","users","totalTaskCount","currentPage","statusEdit","setStatus","sort","email","adminMode","nextOrPrev","pageUsers","currentPageUsers","sortID","active","sortUserId","hasActiveId","sortUsername","sortUserUsername","hasActiveUsername","sortEmail","sortUserEmail","hasActiveEmail","sortStatus","sortUserStatus","hasActiveStatus","mainReducer","totalCount","messageAdd","unshift","idElement","textElement","textEdit","User","createRef","activateEditMode","i","activeInput","setState","deactivateEditMode","textEl","editThunk","newText","current","value","map","el","autoFocus","onBlur","onChange","ref","UsersContainer","main","prevText","editsAC","placeholder","AddUserContainer","addUserThunk","Main","pagesCount","Math","ceil","pages","push","HasClass","sortThunk","length","src","preloader","UserContainer","pageThunk","MainContainer","usersThunk","tasks","total_task_count","App","AppContainer","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.067d5225.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = {\r\n    baseURL: 'https://uxcandy.com/~shapoval/test-task-backend/v2',\r\n\r\n}\r\n\r\nexport const authAPI = {\r\n\r\n    users() {\r\n        return axios.get(instance.baseURL + '?developer=dmitry');\r\n    },\r\n    \r\n    login(user, password) {\r\n        let data = new FormData()\r\n        data.append('username', user)\r\n        data.append('password', password)\r\n        return axios.post(instance.baseURL + '/login?developer=dmitry', data);\r\n    },\r\n\r\n    logout(user, password) {\r\n        let data = new FormData()\r\n        data.append('username', user)\r\n        data.append('password', password)\r\n        return axios.post(instance.baseURL + '/login?developer=dmitry', data);\r\n    },\r\n\r\n    page(page) {\r\n        return axios.get(instance.baseURL + '?developer=dmitry&page=' + page);\r\n    },\r\n\r\n    sort(acsOrDesc, page) {\r\n        return axios.get(instance.baseURL + '?developer=dmitry&page=' + page + '&sort_field=' + acsOrDesc);\r\n    },\r\n\r\n    addUser(name, mail, text) {\r\n        let data = new FormData()\r\n        data.append('username', name)\r\n        data.append('email', mail)\r\n        data.append('text', text)\r\n        \r\n        return axios.post(instance.baseURL + '/create?developer=dmitry' , data);\r\n    },\r\n\r\n    edit(id, token, text, status){\r\n        let data = new FormData()\r\n        data.append('token', token)\r\n        data.append('text', text)\r\n        data.append('status', status)\r\n        \r\n        return axios.post(instance.baseURL + '/edit/' + id + '?developer=dmitry', data);\r\n    }\r\n} \r\n\r\n","import { authAPI } from \"../../API/api\";\r\n\r\nconst LOGIN = 'LOGIN';\r\nconst LOGOUT = 'LOGOUT';\r\nconst AUTH_ME = 'AUTH_ME';\r\n\r\n\r\nlet initialState = {\r\n\r\n    error: null,\r\n    isAuthMe: false,\r\n    message: null,\r\n    openForm: false,\r\n\r\n    loginForm: '',\r\n    passwordForm: '',\r\n    token: null\r\n\r\n};\r\n\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    \r\n    switch(action.type) {\r\n\r\n        case AUTH_ME: {\r\n\r\n            let copyState = {...state}\r\n\r\n            copyState.openForm = true\r\n            \r\n            return copyState;\r\n        }\r\n\r\n        case LOGIN: {\r\n\r\n            let copyState = {...state}\r\n            \r\n            if(action.payload.data.status === 'ok') {\r\n                copyState.openForm = false\r\n                copyState.isAuthMe = true\r\n                copyState.token = action.payload.data.message.token\r\n            } else {\r\n                copyState.error = action.payload.data.status\r\n            }\r\n                \r\n            return copyState;\r\n        }\r\n\r\n        case LOGOUT: {\r\n\r\n            let copyState = {...state}\r\n            \r\n                copyState.openForm = false\r\n                copyState.isAuthMe = false\r\n                \r\n            return copyState;\r\n        }\r\n\r\n        \r\n           \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport let authMeAC = () => {\r\n    \r\n    return {\r\n        type: AUTH_ME,\r\n    }\r\n}\r\n\r\nexport const login = (formData) => {\r\n    return {\r\n        type: LOGIN,\r\n        payload: formData\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    return {\r\n        type: LOGOUT\r\n    }\r\n}\r\n\r\n// THUNK \\\\\r\n\r\nexport const loginThunk = (formData) => {\r\n    return (dispatch) => {\r\n        authAPI.login(formData.username, formData.password)\r\n        .then( response => {\r\n            dispatch(login(response))\r\n        })\r\n    }\r\n}\r\n\r\nexport const logoutThunk = () => {\r\n    return (dispatch) => {\r\n        authAPI.logout(null, null);\r\n        dispatch(logout())\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport './header.scss';\r\n\r\nconst Header = (props) => {\r\n\r\n    let login = () => {\r\n        props.authMeAC()\r\n    }\r\n\r\n    let logout = () => {\r\n        props.logoutThunk()\r\n    }\r\n    \r\n    return (\r\n        <div className='header'>\r\n            <p className={props.isAuthMe ? 'admin' : null}>{props.isAuthMe ? 'Админ' : 'Не авторизован'}</p>\r\n            {props.isAuthMe ? <button className='btn-login' onClick={logout}>Выйти</button>\r\n            :<button className='btn-login' onClick={login}>Войти</button>}\r\n            \r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { authMeAC, logoutThunk } from '../../redux/reducers/authReducer';\r\nimport Header from './Header';\r\n\r\n\r\nclass HeaderContainer extends React.Component {\r\n\r\n    \r\n    render() {\r\n        \r\n        return <Header \r\n                isAuthMe={this.props.isAuthMe}\r\n                openForm={this.props.openForm}\r\n\r\n                authMeAC={this.props.authMeAC}\r\n                logoutThunk={this.props.logoutThunk}/>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    \r\n    return {\r\n        isAuthMe: state.auth.isAuthMe,\r\n        openForm: state.auth.openForm\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\nauthMeAC,\r\nlogoutThunk\r\n\r\n})(HeaderContainer)\r\n","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport './login.scss';\r\n\r\n\r\nconst Login = (props) => {\r\n\r\n    return (\r\n        <form className='login' onSubmit={props.handleSubmit}>\r\n\r\n            <Field component={'input'} name={'username'} required/>\r\n            <Field type={'password'} name={'password'} component={'input'} required/>\r\n            \r\n            <button>Войти</button>\r\n                \r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({form: 'login'})(Login)\r\n\r\nexport default LoginReduxForm;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport LoginReduxForm from './Login';\r\nimport { login, loginThunk } from '../../redux/reducers/authReducer';\r\n\r\n\r\nclass LoginContainer extends React.Component {\r\n\r\n    onSubmit = (formData) => {\r\n        this.props.loginThunk(formData) \r\n    }\r\n\r\n    render() {\r\n        return <LoginReduxForm onSubmit={this.onSubmit}/>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    \r\n    return {\r\n        loginForm: state.auth.loginForm,\r\n        passwordForm: state.auth.passwordForm\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n   login,\r\n   loginThunk\r\n})(LoginContainer)\r\n","import { authAPI } from \"../../API/api\";\r\n\r\nconst GET_USERS = 'GET_USERS';\r\nconst SELECT_PAGE = 'SELECT_PAGE';\r\nconst SORT_ID = 'SORT_ID';\r\nconst SORT_USERNAME = 'SORT_USERNAME';\r\nconst SORT_EMAIL = 'SORT_EMAIL';\r\nconst SORT_STATUS = 'SORT_STATUS';\r\nconst ADD_USER = 'ADD_USER';\r\nconst NEW_TEXT_USER = 'NEW_TEXT_USER';\r\nconst EDIT_INPUT = 'EDIT_INPUT';\r\n\r\nlet initialState = {\r\n\r\n    users: [],\r\n    totalTaskCount: 0,\r\n    currentPage: 1,\r\n    error: null,\r\n    statusEdit: null,\r\n    setStatus: 0,\r\n\r\n    sort: {\r\n        id: 'active',\r\n        username: 'active',\r\n        email: 'active',\r\n        status: 'active'\r\n    },\r\n\r\n    adminMode: {\r\n        id: null,\r\n        text: null\r\n    }\r\n    \r\n};\r\n\r\n\r\nconst mainReducer = (state = initialState, action) => {\r\n    \r\n    switch(action.type) {\r\n\r\n        case GET_USERS: {\r\n\r\n            let copyState = {...state}\r\n\r\n            copyState.users = action.users\r\n            copyState.totalTaskCount = action.totalCount\r\n            \r\n            return copyState;\r\n        }\r\n\r\n        case SELECT_PAGE: {\r\n\r\n            let copyState = {...state}\r\n\r\n            copyState.users = action.pageUsers\r\n            copyState.currentPage = action.currentPageUsers\r\n            copyState.sort.id = 'active'\r\n            copyState.sort.username = 'active'\r\n            copyState.sort.email = 'active'\r\n            \r\n            return copyState;\r\n        }\r\n\r\n        case SORT_ID: {\r\n\r\n            let copyState = {...state}\r\n            copyState.users = action.sortUserId\r\n            copyState.sort.id = action.hasActiveId;\r\n            \r\n            return copyState;\r\n        }\r\n\r\n        case SORT_USERNAME: {\r\n\r\n            let copyState = {...state}\r\n            copyState.users = action.sortUserUsername\r\n            copyState.sort.username = action.hasActiveUsername;\r\n            \r\n            return copyState;\r\n        }\r\n\r\n        case SORT_EMAIL: {\r\n\r\n            let copyState = {...state}\r\n            copyState.users = action.sortUserEmail\r\n            copyState.sort.email = action.hasActiveEmail\r\n            \r\n            return copyState;\r\n        }\r\n\r\n        case SORT_STATUS: {\r\n\r\n            let copyState = {...state}\r\n            copyState.users = action.sortUserStatus\r\n            copyState.sort.status = action.hasActiveStatus\r\n            \r\n            return copyState;\r\n        }\r\n\r\n        case ADD_USER: {\r\n\r\n            let copyState = {...state}\r\n\r\n            if(action.messageAdd.status === 'ok') {\r\n                copyState.error = 'ok'\r\n                copyState.users.unshift(action.messageAdd.message)\r\n            } else {\r\n                copyState.error = 'error'\r\n            }\r\n\r\n            \r\n            return copyState;\r\n        }\r\n\r\n        case NEW_TEXT_USER: {\r\n\r\n            let copyState = {...state}\r\n\r\n            copyState.adminMode.id = action.idElement\r\n            copyState.adminMode.text = action.textElement\r\n\r\n            return copyState;\r\n        }\r\n\r\n        case EDIT_INPUT: {\r\n\r\n            let copyState = {...state}\r\n\r\n            if(copyState.adminMode.text === action.textEdit) {\r\n                copyState.setStatus = 1\r\n            } else if (copyState.adminMode.text !== action.textEdit) {\r\n                copyState.setStatus = 11\r\n            }\r\n            copyState.statusEdit = action.statusEdit\r\n\r\n            \r\n            return copyState;\r\n        }\r\n   \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport let activeInput = (id, text) => {\r\n    \r\n    return {\r\n        type: NEW_TEXT_USER,\r\n        idElement: id,\r\n        textElement: text\r\n    }\r\n}\r\n\r\nexport let getUsers = (users, totalCount) => {\r\n    \r\n    return {\r\n        type: GET_USERS,\r\n        users: users,\r\n        totalCount: totalCount\r\n    }\r\n}\r\n\r\nexport let nextOrPrev = (users, page) => {\r\n    \r\n    return {\r\n        type: SELECT_PAGE,\r\n        pageUsers: users,\r\n        currentPageUsers: page\r\n\r\n    }\r\n}\r\n\r\nexport let sortID = (user, active) => {\r\n    \r\n    return {\r\n        type: SORT_ID,\r\n        sortUserId: user,\r\n        hasActiveId: active\r\n    }\r\n}\r\n\r\nexport let sortUsername = (user, active) => {\r\n    \r\n    return {\r\n        type: SORT_USERNAME,\r\n        sortUserUsername: user,\r\n        hasActiveUsername: active\r\n    }\r\n}\r\n\r\nexport let sortEmail = (user, active) => {\r\n    \r\n    return {\r\n        type: SORT_EMAIL,\r\n        sortUserEmail: user,\r\n        hasActiveEmail: active\r\n    }\r\n}\r\n\r\nexport let sortStatus = (user, active) => {\r\n    \r\n    return {\r\n        type: SORT_STATUS,\r\n        sortUserStatus: user,\r\n        hasActiveStatus: active\r\n    }\r\n}\r\n\r\nexport let addUserAC = (message) => {\r\n    \r\n    return {\r\n        type: ADD_USER,\r\n        messageAdd: message\r\n    }\r\n}\r\n\r\nexport let editsAC = (status, text) => {\r\n    \r\n    return {\r\n        type: EDIT_INPUT,\r\n        statusEdit: status,\r\n        textEdit: text\r\n    }\r\n}\r\n\r\n\r\n\r\n// THUNK \\\\\r\n\r\nexport const editThunk = (id, token, text, status, prevText) => {\r\n    \r\n    return (dispatch) => {\r\n        authAPI.edit(id, token, text, status)\r\n        .then( response => {\r\n            dispatch(editsAC(response.data.status, prevText))\r\n            \r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const usersThunk = () => {\r\n    \r\n    return (dispatch) => {\r\n        authAPI.users()\r\n        .then( response => {\r\n            dispatch(getUsers(response.data.message.tasks, response.data.message.total_task_count))\r\n        })\r\n    }\r\n}\r\n\r\nexport const addUserThunk = (name, mail, text) => {\r\n    \r\n    return (dispatch) => {\r\n        authAPI.addUser(name, mail, text)\r\n        .then( response => {\r\n            dispatch(addUserAC(response.data))\r\n        })\r\n    }\r\n}\r\n\r\nexport const pageThunk = (value, page, currentPage) => {\r\n    \r\n    return (dispatch) => {\r\n        if(value === 'next') {\r\n            \r\n            if(currentPage <= page) {\r\n                authAPI.page(1)\r\n                .then( response => {\r\n                    dispatch(nextOrPrev(response.data.message.tasks, 1)) \r\n                })\r\n            } else {\r\n                authAPI.page(page + 1)\r\n                .then( response => {\r\n                    dispatch(nextOrPrev(response.data.message.tasks, page + 1))\r\n                })\r\n            }\r\n        }\r\n\r\n        if(value === 'prev') {\r\n            \r\n            if(page === 1 ) {\r\n                authAPI.page(currentPage)\r\n                .then( response => {\r\n                    dispatch(nextOrPrev(response.data.message.tasks, currentPage))\r\n                })\r\n            } else {\r\n                authAPI.page(page - 1)\r\n                .then( response => {\r\n                    dispatch(nextOrPrev(response.data.message.tasks, page - 1))\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const sortThunk = (sort, page) => {\r\n\r\n    if(sort === 'id') {\r\n        let sortId = 'id&sort_direction=asc';\r\n\r\n        return (dispatch) => {\r\n            authAPI.sort(sortId, page)\r\n            .then( response => {\r\n                dispatch(sortID(response.data.message.tasks, 'active'))\r\n            })\r\n        }\r\n       \r\n    } else if(sort === 'id active') {\r\n        let sortId = 'id&sort_direction=desc';\r\n\r\n        return (dispatch) => {\r\n            authAPI.sort(sortId, page)\r\n        .then( response => {\r\n            dispatch(sortID(response.data.message.tasks, null))\r\n        })\r\n        }\r\n    }\r\n\r\n    \r\n    if(sort === 'username') {\r\n        let usernameSort = 'username&sort_direction=asc';\r\n\r\n        return (dispatch) => {\r\n            authAPI.sort(usernameSort, page)\r\n            .then( response => {\r\n                dispatch(sortUsername(response.data.message.tasks, 'active'))\r\n                \r\n            })\r\n        }\r\n       \r\n    } else if(sort === 'username active') {\r\n        let usernameSort = 'username&sort_direction=desc';\r\n\r\n        return (dispatch) => {\r\n            authAPI.sort(usernameSort, page)\r\n            .then( response => {\r\n                dispatch(sortUsername(response.data.message.tasks, null))\r\n            })\r\n        }\r\n    }\r\n\r\n    if(sort === 'email') {\r\n        let emailSort = 'email&sort_direction=asc';\r\n\r\n        return (dispatch) => {\r\n            authAPI.sort(emailSort, page)\r\n            .then( response => {\r\n                dispatch(sortEmail(response.data.message.tasks, 'active'))\r\n                \r\n            })\r\n        }\r\n       \r\n    } else if(sort === 'email active') {\r\n        let emailSort = 'email&sort_direction=desc';\r\n\r\n        return (dispatch) => {\r\n            authAPI.sort(emailSort, page)\r\n            .then( response => {\r\n                dispatch(sortEmail(response.data.message.tasks, null))\r\n            })\r\n        }\r\n    }\r\n\r\n    if(sort === 'status') {\r\n        let statusSort = 'status&sort_direction=asc';\r\n\r\n        return (dispatch) => {\r\n            authAPI.sort(statusSort, page)\r\n            .then( response => {\r\n                dispatch(sortStatus(response.data.message.tasks, 'active'))\r\n                \r\n            })\r\n        }\r\n       \r\n    } else if(sort === 'status active') {\r\n        let statusSort = 'status&sort_direction=desc';\r\n\r\n        return (dispatch) => {\r\n            authAPI.sort(statusSort, page)\r\n            .then( response => {\r\n                dispatch(sortStatus(response.data.message.tasks, null))\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default mainReducer;","import React from 'react';\r\nimport './user.scss';\r\n\r\n\r\n\r\nclass User extends React.Component {\r\n\r\n\r\n    text = React.createRef();\r\n\r\n    state = {\r\n        text:null\r\n    }\r\n\r\n    activateEditMode = (i, text) => {\r\n        this.props.activeInput(i, text)\r\n        this.setState({\r\n            text: text\r\n        })\r\n    }\r\n\r\n    deactivateEditMode = (id, text, textEl) => {\r\n        this.props.activeInput(null, text)\r\n        this.props.editThunk(id, this.props.token, text, this.props.setStatus, textEl)\r\n\r\n        this.setState({\r\n            text: this.props.adminMode.text\r\n            \r\n        })\r\n    }\r\n\r\n    newText = (i, newText) => {\r\n        let text = this.text.current.value\r\n        this.props.activeInput(i, text)\r\n        \r\n        this.setState({\r\n            text: newText\r\n        })\r\n    }\r\n\r\n    render() {\r\n        \r\n        let users = this.props.users.map( (el, i) => {\r\n            return (\r\n                <div className='user' key={el.id} >\r\n                    <p className='user-id'>{el.id}</p>\r\n                    <p className='user-name'>{el.username}</p>\r\n                    <p className='user-email'>{el.email}</p>\r\n                    <p className='user-text' onClick={() => this.activateEditMode(i, el.text)}>\r\n                        {this.props.adminMode.id === i && this.props.isAuthMe ?  \r\n                        <input autoFocus={true}  onBlur={()=>this.deactivateEditMode(el.id, this.props.adminMode.text, el.text )} \r\n                            value={this.props.adminMode.text} \r\n                            onChange={() => this.newText(i, this.props.adminMode.text)}\r\n                            ref={this.text}/>:\r\n                        this.props.adminMode.id === i ? this.props.adminMode.text : el.text}\r\n                    </p>\r\n                    <p className='user-status'>\r\n                        <span className={\r\n                            this.props.adminMode.id === i && this.props.isAuthMe && this.props.setStatus !== 0 ? \r\n                            'status-' + this.props.setStatus\r\n                            : 'status-' + el.status }></span>\r\n                        <span className='status-text'>\r\n                            {el.status === 0 ? 'задача не выполнена'\r\n                            :el.status === 1 ? 'задача не выполнена, отредактирована админом'\r\n                            :el.status === 10 ? 'задача выполнена'\r\n                            : 'задача отредактирована админом и выполнена'}\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n            )\r\n       })\r\n    \r\n        return (\r\n            <>\r\n                {users}\r\n               \r\n            </>\r\n        )\r\n    }\r\n  \r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { activeInput, editThunk } from './../../../redux/reducers/mainReducer';\r\nimport User from './User';\r\n\r\n\r\nclass UsersContainer extends React.Component {\r\n\r\n\r\n    render() {\r\n        return <User \r\n            users={this.props.users} \r\n            isAuthMe={this.props.isAuthMe} \r\n            adminMode={this.props.adminMode}\r\n            token={this.props.token}\r\n            setStatus={this.props.setStatus}\r\n\r\n            activeInput={this.props.activeInput}\r\n            editThunk={this.props.editThunk}/>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    \r\n    return {\r\n        users: state.main.users,\r\n        isAuthMe: state.auth.isAuthMe,\r\n        adminMode: state.main.adminMode,\r\n        token: state.auth.token,\r\n        setStatus: state.main.setStatus\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    activeInput,\r\n    editThunk\r\n})(UsersContainer)\r\n","export default __webpack_public_path__ + \"static/media/loader.4f50df34.svg\";","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport './addUser.scss';\r\n\r\n\r\nconst AddUser = (props) => {\r\n\r\n    return (\r\n        <form className='add-user' onSubmit={props.handleSubmit}>\r\n\r\n            <Field component={'input'} type={'text'} name={'username'} placeholder='username' required/>\r\n            <Field component={'input'} type={'email'} name={'email'} placeholder='email' required/>\r\n            <Field component={'textarea'} type={'text'} name={'text'} placeholder='text' required/>\r\n            \r\n            <button>добавить</button>\r\n                \r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({form: 'add-user'})(AddUser)\r\n\r\nexport default LoginReduxForm;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport LoginReduxForm from './AddUser';\r\nimport { addUserThunk } from './../../../redux/reducers/mainReducer';\r\n\r\n\r\nclass AddUserContainer extends React.Component {\r\n\r\n  \r\n\r\n    onSubmit = (formData) => {\r\n        this.props.addUserThunk(formData.username, formData.email, formData.text)\r\n    }\r\n\r\n    render() {\r\n        return <LoginReduxForm onSubmit={this.onSubmit}/>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    \r\n    return {\r\n        totalTaskCount: state.main.totalTaskCount\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    addUserThunk\r\n})(AddUserContainer)\r\n","import React from 'react';\r\nimport './main.scss';\r\nimport UserContainer from './Users/UserContainer';\r\nimport preloader from './../../assets/images/loader.svg'\r\nimport AddUserContainer from './AddUser/AddUserContainer';\r\n\r\n\r\nconst Main = (props) => {\r\n\r\n    let id = React.createRef();\r\n    let username = React.createRef();\r\n    let email = React.createRef();\r\n    let status = React.createRef();\r\n\r\n    let pagesCount = Math.ceil(props.totalTaskCount / 3);\r\n\r\n    let pages = [];\r\n\r\n    for(let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let prevPage = () => {\r\n        props.pageThunk('prev', props.currentPage, pages.length)\r\n    }\r\n\r\n    let nextPage = () => {\r\n        props.pageThunk('next', props.currentPage, pages.length)\r\n    }\r\n\r\n    let sortId = () => {\r\n        let HasClass = id.current.className;\r\n        props.sortThunk(HasClass, props.currentPage)   \r\n    }\r\n\r\n    let sortUsername = () => {\r\n        let HasClass = username.current.className;\r\n        props.sortThunk(HasClass, props.currentPage)\r\n    }\r\n\r\n    let sortEmail = () => {\r\n        let HasClass = email.current.className;\r\n        props.sortThunk(HasClass, props.currentPage)\r\n    }\r\n\r\n    let sortStatus = () => {\r\n        let HasClass = status.current.className;\r\n        props.sortThunk(HasClass, props.currentPage)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='main'>\r\n\r\n            <div className='users-filter'>\r\n                <p className={props.sort.id ? 'id ' + props.sort.id : 'id'} ref={id} onClick={sortId}>ID</p>\r\n                <p className={props.sort.username ? 'username ' + props.sort.username : 'username'} ref={username} onClick={sortUsername}>USERNAME</p>\r\n                <p className={props.sort.email ? 'email ' + props.sort.email : 'email'} onClick={sortEmail} ref={email}>EMAIL</p>\r\n                <p className='text'>TEXT</p>\r\n                <p className={props.sort.status ? 'status ' + props.sort.status : 'status'} onClick={sortStatus} ref={status}>STATUS</p>\r\n            </div>\r\n\r\n            {props.users.length === 0 ? <div className='preloader'><img src={preloader}/></div> \r\n            :  <UserContainer />}\r\n\r\n           \r\n\r\n            <div className='paginator'>\r\n                <span className='prev-page' onClick={prevPage}></span>\r\n                <div className='btn-page'>{pages[props.currentPage - 1]}</div>\r\n                <span className='next-page' onClick={nextPage}></span>\r\n            </div>\r\n\r\n            <AddUserContainer />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { usersThunk, pageThunk, sortThunk } from '../../redux/reducers/mainReducer';\r\nimport Main from './Main';\r\n\r\n\r\nclass MainContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.usersThunk()\r\n    }\r\n\r\n\r\n    render() {\r\n        return <Main \r\n            users={this.props.users} \r\n            sort={this.props.sort}\r\n            totalTaskCount={this.props.totalTaskCount} \r\n            currentPage={this.props.currentPage}\r\n\r\n            pageThunk={this.props.pageThunk}\r\n            sortThunk={this.props.sortThunk}/>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    \r\n    return {\r\n        users: state.main.users,\r\n        totalTaskCount: state.main.totalTaskCount,\r\n        currentPage: state.main.currentPage,\r\n        sort: state.main.sort,\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\nusersThunk,\r\npageThunk,\r\nsortThunk \r\n})(MainContainer)\r\n","import React from 'react';\nimport './App.scss';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport LoginContainer from './components/Login/LoginContainer';\nimport MainContainer from './components/Main/MainContainer';\n\n\nconst App = (props) => {\n\n  return (\n    <div className=\"app\">\n         <HeaderContainer />\n\n         <div className='container'>\n          {props.openForm ? <LoginContainer /> :  <MainContainer />}\n         </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport App from './App';\r\n\r\n\r\nclass AppContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return <App openForm={this.props.openForm} isAuthMe={this.props.isAuthMe}/>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    \r\n    return {\r\n        isAuthMe: state.auth.isAuthMe,\r\n        openForm: state.auth.openForm\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n\r\n})(AppContainer)\r\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport authReducer from './reducers/authReducer';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport mainReducer from \"./reducers/mainReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    auth: authReducer,\r\n    main: mainReducer,\r\n    form: formReducer\r\n});\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport AppContainer from './AppContainer';\nimport './index.scss';\nimport store from './redux/redux-store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n  \n);"],"sourceRoot":""}